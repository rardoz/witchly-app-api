{
  "info": {
    "_postman_id": "56180f25-810e-486a-b932-a790b875dca6",
    "name": "Witchly App API",
    "description": "Comprehensive API collection for Witchly App - includes OAuth2 authentication, GraphQL queries and mutations for user and client management",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "49009646",
    "_collection_link": "https://witchlyapp-203953.postman.co/workspace/Witchly-App's-Workspace~4783bd47-8579-42b0-89fd-82f778b422d7/collection/49009646-56180f25-810e-486a-b932-a790b875dca6?action=share&source=collection_link&creator=49009646"
  },
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Get OAuth2 Access Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.access_token);",
                  "    console.log('Access token saved to collection variable');",
                  "} else {",
                  "    console.log('Failed to get access token');",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"client_credentials\",\n  \"client_id\": \"xxx\",\n  \"client_secret\": \"xxxx\",\n  \"scope\": \"read write admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/oauth/token",
              "host": ["{{baseUrl}}"],
              "path": ["oauth", "token"]
            },
            "description": "Get an OAuth2 access token using client credentials flow. Replace client_id and client_secret with actual values."
          },
          "response": []
        }
      ],
      "description": "OAuth2 Client Credentials authentication endpoints"
    },
    {
      "name": "üè• Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check API health status"
          },
          "response": []
        },
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Basic API welcome message"
          },
          "response": []
        }
      ],
      "description": "Basic health and status endpoints"
    },
    {
      "name": "üë§ User Management (GraphQL)",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetUsers($limit: Float, $offset: Float){\n    users(limit: $limit, offset: $offset) {\n        id\n        name\n        email\n        userType\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        handle\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n    }\n}",
                "variables": "{\n    \"limit\": 10,\n    \"offset\": 0\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Retrieve all users (public access)"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetUser($id: ID!) {\n    user(id: $id) {\n        id\n        name\n        email\n        userType\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        handle\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n    }\n }",
                "variables": "{\n    \"id\": \"68e093203e9a0767c092581e\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get a specific user by ID"
          },
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n     id\n        name\n        email\n        userType\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        handle\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n    }  \n}",
                "variables": "{\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"userType\": \"admin\",\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handle\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"red\",\n        \"sign\": \"leo\",\n        \"sex\": \"male\"\n    }\n  }"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n        id\n        name\n        email\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        handle\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n    }\n}",
                "variables": "{\n    \"id\": \"68e07ce509c33f9b96339e25\",\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"johnzz.doe@example.com\",\n        \"userType\": \"admin\",\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handlez\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"red\",\n        \"sign\": \"leo\",\n        \"sex\": \"male\"\n    }\n  }"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Update an existing user"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation DeleteUser( $id: ID! ) {\n        deleteUser(id: $id)\n }",
                "variables": "{\n    \"id\": \"68e093203e9a0767c092581e\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Delete a user by ID"
          },
          "response": []
        }
      ],
      "description": "User management operations via GraphQL"
    },
    {
      "name": "üîë Client Management (GraphQL)",
      "item": [
        {
          "name": "Get All Clients (Admin Only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetClients {\\n    clients {\\n      id\\n      clientId\\n      name\\n      description\\n      isActive\\n      allowedScopes\\n      tokenExpiresIn\\n      lastUsed\\n      createdAt\\n      updatedAt\\n    }\\n  }\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get all OAuth2 clients (requires admin scope)"
          },
          "response": []
        },
        {
          "name": "Get Client by ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetClient($clientId: String!) {\\n    client(clientId: $clientId) {\\n      id\\n      clientId\\n      name\\n      description\\n      isActive\\n      allowedScopes\\n      tokenExpiresIn\\n      lastUsed\\n      createdAt\\n      updatedAt\\n    }\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get a specific client by clientId (clients can view their own, admins can view any)"
          },
          "response": []
        },
        {
          "name": "Create Client (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.createClient) {",
                  "        console.log('Created Client ID:', response.data.createClient.clientId);",
                  "        console.log('Created Client Secret:', response.data.createClient.clientSecret);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateClient($input: CreateClientInput!) {\\n    createClient(input: $input) {\\n      clientId\\n      clientSecret\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"Test Client\",\n      \"description\": \"A test OAuth2 client\",\n      \"allowedScopes\": [\"read\", \"write\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Create a new OAuth2 client (requires admin scope). Returns clientId and clientSecret."
          },
          "response": []
        },
        {
          "name": "Update Client (Admin Only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation UpdateClient($clientId: String!, $input: UpdateClientInput!) {\\n    updateClient(clientId: $clientId, input: $input) {\\n      id\\n      clientId\\n      name\\n      description\\n      isActive\\n      allowedScopes\\n      tokenExpiresIn\\n      updatedAt\\n    }\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\",\n    \"input\": {\n      \"name\": \"Updated Client Name\",\n      \"description\": \"Updated description\",\n      \"isActive\": true,\n      \"allowedScopes\": [\"read\", \"write\", \"admin\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Update an existing OAuth2 client (requires admin scope)"
          },
          "response": []
        },
        {
          "name": "Delete Client (Admin Only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation DeleteClient($clientId: String!) {\\n    deleteClient(clientId: $clientId)\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Delete an OAuth2 client (requires admin scope)"
          },
          "response": []
        },
        {
          "name": "Regenerate Client Secret (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.regenerateClientSecret) {",
                  "        console.log('New Client Secret:', response.data.regenerateClientSecret);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation RegenerateClientSecret($clientId: String!) {\\n    regenerateClientSecret(clientId: $clientId)\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Regenerate the secret for an OAuth2 client (requires admin scope)"
          },
          "response": []
        }
      ],
      "description": "OAuth2 client management operations via GraphQL"
    },
    {
      "name": "üîç GraphQL Introspection",
      "item": [
        {
          "name": "GraphQL Schema Introspection",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query IntrospectionQuery {\\n    __schema {\\n      queryType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      mutationType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      types {\\n        name\\n        description\\n        kind\\n      }\\n    }\\n  }\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get the GraphQL schema structure and available operations"
          },
          "response": []
        }
      ],
      "description": "GraphQL schema exploration and introspection"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3002",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    }
  ]
}
