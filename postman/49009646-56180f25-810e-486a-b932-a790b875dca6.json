{
	"info": {
		"_postman_id": "49009646-56180f25-810e-486a-b932-a790b875dca6",
		"name": "Witchly App API",
		"description": "Comprehensive API collection for Witchly App - includes OAuth2 authentication, user login/session management with dual authentication support, GraphQL queries and mutations for user and client management with complete profile support. Session operations require both OAuth2 access tokens AND user session tokens for enhanced security.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Get OAuth2 Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f43bb924-be21-42d9-86c4-1dff5985f8f4",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', response.data.authenticate.access_token);",
									"    console.log('Access token saved to collection variable');",
									"} else {",
									"    console.log('Failed to get access token');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "49009646-78b4f094-a336-425a-8cf6-6160fccfe311",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Authenticate($grantType: String!, $clientId: String!, $clientSecret: String!, $scope: String!) { \n        authenticate(grant_type: $grantType, client_id: $clientId, client_secret: $clientSecret, scope: $scope) { \n            access_token \n            token_type \n            expires_in scope \n        } \n    }",
								"variables": "{\n    \"grantType\": \"client_credentials\",\n    \"clientId\": \"{{clientId}}\",\n    \"clientSecret\": \"{{clientSecret}}\",\n    \"scope\": \"{{scope}}\"\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get an OAuth2 access token using client credentials flow. Replace client_id and client_secret with actual values."
					},
					"response": []
				}
			],
			"id": "49009646-ba3cd696-4f9d-4610-9908-2abb38ee20a7",
			"description": "OAuth2 Client Credentials authentication endpoints"
		},
		{
			"name": "üè• Health & Status",
			"item": [
				{
					"name": "Health Check",
					"id": "49009646-5dccaf62-9323-4d4d-bd9f-fb1f5e606f04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check API health status"
					},
					"response": []
				},
				{
					"name": "Root Endpoint",
					"id": "49009646-cef0d06b-f478-444a-a213-e53ce009be1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Basic API welcome message"
					},
					"response": []
				}
			],
			"id": "49009646-92f008f8-e307-49e1-9783-d484d5d1e238",
			"description": "Basic health and status endpoints"
		},
		{
			"name": "ÔøΩ Signup (GraphQL)",
			"item": [
				{
					"name": "Initiate Signup",
					"id": "49009646-signup-initiate-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation InitiateSignup($input: InitiateSignupInput!) {\n    initiateSignup(input: $input) {\n        success\n        message\n        expiresAt\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Start the signup process by providing an email address. This will send a verification code to the email."
					},
					"response": []
				},
				{
					"name": "Complete Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e340721d-3a91-4ea1-8352-612fac7db4c1",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.completeSignup) {",
									"        pm.collectionVariables.set('sessionToken', response.data.completeSignup.sessionToken);",
									"        pm.collectionVariables.set('userId', response.data.completeSignup.userId);",
									"        if (response.data.completeSignup.refreshToken) {",
									"            pm.collectionVariables.set('refreshToken', response.data.completeSignup.refreshToken);",
									"            console.log('Long session with refresh token saved');",
									"        } else {",
									"            console.log('Short session token saved');",
									"        }",
									"    }",
									"} else {",
									"    console.log('Failed to complete signup');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-signup-complete-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CompleteSignup($input: CompleteSignupInput!) {\n    completeSignup(input: $input) {\n        success\n        message\n        sessionToken\n        refreshToken\n        expiresIn\n        expiresAt\n        userId\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\",\n        \"verificationCode\": \"852863\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Complete the signup process by providing the email and the 6-digit verification code received via email."
					},
					"response": []
				}
			],
			"id": "49009646-signup-folder-001",
			"description": "Signup flow endpoints - initiate with email and complete with verification code"
		},
		{
			"name": "üîë Login & Sessions (GraphQL)",
			"item": [
				{
					"name": "Initiate Login",
					"id": "49009646-login-initiate-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation InitiateLogin($input: InitiateLoginInput!) {    initiateLogin(input: $input) {        \n        success\n        message\n        expiresAt\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Start the login process for an existing user by providing their email address. This will send a verification code to the email."
					},
					"response": []
				},
				{
					"name": "Complete Login (Unified)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "session-token-save",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.completeLogin) {",
									"        pm.collectionVariables.set('sessionToken', response.data.completeLogin.sessionToken);",
									"        pm.collectionVariables.set('userId', response.data.completeLogin.userId);",
									"        if (response.data.completeLogin.refreshToken) {",
									"            pm.collectionVariables.set('refreshToken', response.data.completeLogin.refreshToken);",
									"            console.log('Long session with refresh token saved');",
									"        } else {",
									"            console.log('Short session token saved');",
									"        }",
									"    }",
									"} else {",
									"    console.log('Failed to complete login');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-login-complete-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CompleteLogin($input: CompleteLoginInput!) {   \n        completeLogin(input: $input) {\n            success\n            message\n            sessionToken\n            refreshToken\n            expiresIn\n            expiresAt\n            userId\n        }\n    }",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\",     \n        \"verificationCode\": \"712758\",       \n        \"keepMeLoggedIn\": true   \n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Complete the login process with a verification code. Set keepMeLoggedIn to true for 90-day session with refresh token, false for 4-hour session."
					},
					"response": []
				},
				{
					"name": "Refresh Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "refresh-session-token",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.refreshSession) {",
									"        pm.collectionVariables.set('sessionToken', response.data.refreshSession.sessionToken);",
									"        if (response.data.refreshSession.refreshToken) {",
									"            pm.collectionVariables.set('refreshToken', response.data.refreshSession.refreshToken);",
									"        }",
									"        console.log('Session refreshed and new tokens saved');",
									"    }",
									"} else {",
									"    console.log('Failed to refresh session');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-session-refresh-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RefreshSession($input: RefreshSessionInput!) {    \n    refreshSession(input: $input) {        \n        sessionToken        \n        refreshToken        \n        expiresIn       \n        expiresAt    \n    }\n}",
								"variables": "{   \n    \"input\": {\n        \"refreshToken\": \"{{refreshToken}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Refresh an existing long-term session using a refresh token. Only available for sessions created with keepMeLoggedIn: true."
					},
					"response": []
				},
				{
					"name": "Get My Sessions",
					"id": "49009646-sessions-list-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token (required for session operations)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query MySessions {    \n    mySessions {\n        sessionId\n        keepMeLoggedIn\n        lastUsedAt\n        expiresAt\n        userAgent\n        ipAddress\n        isActive\n        createdAt\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "List all active sessions for the authenticated user. Requires dual authentication: OAuth2 access token AND user session token."
					},
					"response": []
				},
				{
					"name": "Logout (Current Session)",
					"id": "49009646-session-logout-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token (required for session operations)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Logout {\n    logout {\n        success\n        message\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Logout from the current session. This will invalidate the current session token. Requires dual authentication: OAuth2 access token AND user session token."
					},
					"response": []
				},
				{
					"name": "Logout All Sessions",
					"id": "49009646-session-logout-all-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token (required for session operations)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LogoutAllSessions {\n    logoutAllSessions {\n        success\n        message\n        sessionsTerminated\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Logout from all sessions for the current user. This will invalidate all session tokens for the user. Requires dual authentication: OAuth2 access token AND user session token."
					},
					"response": []
				}
			],
			"id": "49009646-login-sessions-folder-001",
			"description": "Login flow and session management endpoints - initiate login, complete with verification code, manage sessions"
		},
		{
			"name": "üë§ User Management (GraphQL)",
			"item": [
				{
					"name": "Get All Users",
					"id": "49009646-cd14a714-9c3a-4706-8c85-395de253319c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUsers($limit: Float, $offset: Float){\n    users(limit: $limit, offset: $offset) {\n        id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }\n}",
								"variables": "{\n    \"limit\": 10,\n    \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Retrieve all users (public access)"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"id": "49009646-3fb83463-7980-4098-9982-8300c2c16633",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUser($id: ID!) {\n    user(id: $id) {\n        id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }\n }",
								"variables": "{\n    \"id\": \"68e4617a870854281db2b95d\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get a specific user by ID"
					},
					"response": []
				},
				{
					"name": "Create User",
					"id": "49009646-6d120086-9187-4907-9f73-4c588e6d6d3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n     id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }  \n}",
								"variables": "{\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john.does@example.com\",\n        \"allowedScopes\": [\"read\", \"write\", \"basic\"],\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handle\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"#FF5733\",\n        \"sign\": \"aries\",\n        \"sex\": \"male\",\n        \"location\": \"location\",\n        \"birthDate\": \"1990-01-01T00:00:00.000Z\",\n        \"pronouns\": \"he/him\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Create Admin User",
					"id": "49009646-0ffaa053-fd0a-4d98-a448-efdb34d2fd8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n     id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }  \n}",
								"variables": "{\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john.does.admin@example.com\",\n        \"allowedScopes\": [\"read\", \"write\", \"admin\"],\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handle_joe_admin\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"#FF5733\",\n        \"sign\": \"aries\",\n        \"sex\": \"male\",\n        \"location\": \"location\",\n        \"birthDate\": \"1990-01-01T00:00:00.000Z\",\n        \"pronouns\": \"he/him\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Update User",
					"id": "49009646-86f4292c-9f49-425b-acf9-e8e151f0962a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n        id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }\n}",
								"variables": "{\n    \"id\": \"68eb2b3be279fa2be6a093b1\",\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"johnzz.doe@example.com\",\n        \"allowedScopes\": [\"read\", \"write\", \"admin\"],\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handlez\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"red\",\n        \"sign\": \"leo\",\n        \"sex\": \"male\",\n        \"location\": \"San Francisco, CA\",\n        \"birthDate\": \"1985-10-12T00:00:00.000Z\",\n        \"pronouns\": \"they/them\"\n    }\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Update an existing user"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"id": "49009646-b1b905f8-001b-4b1e-bacb-1a7629ffcf5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteUser( $id: ID! ) {\n        deleteUser(id: $id)\n }",
								"variables": "{\n    \"id\": \"68eb2b3be279fa2be6a093b1\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Delete a user by ID"
					},
					"response": []
				}
			],
			"id": "49009646-7e081069-bb16-4b40-8ba5-c56cf66521e2",
			"description": "User management operations via GraphQL"
		},
		{
			"name": "üîë Client Management (GraphQL)",
			"item": [
				{
					"name": "Get All Clients (Admin Only)",
					"id": "49009646-29d38c5e-92bf-48ef-9ceb-b745cee05c1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetClients {\\n    clients {\\n      id\\n      clientId\\n      name\\n      description\\n      isActive\\n      allowedScopes\\n      tokenExpiresIn\\n      lastUsed\\n      createdAt\\n      updatedAt\\n    }\\n  }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get all OAuth2 clients (requires admin scope)"
					},
					"response": []
				},
				{
					"name": "Get Client by ID",
					"id": "49009646-cdc147fb-cc47-4a51-95c5-163644c277e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetClient($clientId: String!) {\\n    client(clientId: $clientId) {\\n      id\\n      clientId\\n      name\\n      description\\n      isActive\\n      allowedScopes\\n      tokenExpiresIn\\n      lastUsed\\n      createdAt\\n      updatedAt\\n    }\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get a specific client by clientId (clients can view their own, admins can view any)"
					},
					"response": []
				},
				{
					"name": "Create Client (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8bc4040-0862-4a7c-97bc-544f87d21013",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.createClient) {",
									"        console.log('Created Client ID:', response.data.createClient.clientId);",
									"        console.log('Created Client Secret:', response.data.createClient.clientSecret);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-e60a1064-ca7a-417c-95bf-8b8fd86587a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CreateClient($input: CreateClientInput!) {\\n    createClient(input: $input) {\\n      clientId\\n      clientSecret\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"Test Client\",\n      \"description\": \"A test OAuth2 client\",\n      \"allowedScopes\": [\"read\", \"write\"]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new OAuth2 client (requires admin scope). Returns clientId and clientSecret."
					},
					"response": []
				},
				{
					"name": "Update Client (Admin Only)",
					"id": "49009646-13d49c1e-e043-48c6-b74f-8f388fafead6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation UpdateClient($clientId: String!, $input: UpdateClientInput!) {\\n    updateClient(clientId: $clientId, input: $input) {\\n      id\\n      clientId\\n      name\\n      description\\n      isActive\\n      allowedScopes\\n      tokenExpiresIn\\n      updatedAt\\n    }\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\",\n    \"input\": {\n      \"name\": \"Updated Client Name\",\n      \"description\": \"Updated description\",\n      \"isActive\": true,\n      \"allowedScopes\": [\"read\", \"write\", \"admin\"]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Update an existing OAuth2 client (requires admin scope)"
					},
					"response": []
				},
				{
					"name": "Delete Client (Admin Only)",
					"id": "49009646-99437999-ff6f-4d65-a30a-4b31ab46af40",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation DeleteClient($clientId: String!) {\\n    deleteClient(clientId: $clientId)\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Delete an OAuth2 client (requires admin scope)"
					},
					"response": []
				},
				{
					"name": "Regenerate Client Secret (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d48b5d0f-074c-419b-8950-d89b2004adac",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.regenerateClientSecret) {",
									"        console.log('New Client Secret:', response.data.regenerateClientSecret);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-fcf0321c-83d2-4d8a-a508-99c644123ec5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation RegenerateClientSecret($clientId: String!) {\\n    regenerateClientSecret(clientId: $clientId)\\n  }\",\n  \"variables\": {\n    \"clientId\": \"CLIENT_ID_HERE\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Regenerate the secret for an OAuth2 client (requires admin scope)"
					},
					"response": []
				}
			],
			"id": "49009646-872df14d-0e27-45ef-be5f-f1aaaae96e9d",
			"description": "OAuth2 client management operations via GraphQL"
		},
		{
			"name": "üîç GraphQL Introspection",
			"item": [
				{
					"name": "GraphQL Schema Introspection",
					"id": "49009646-498ee20f-264a-4edd-851d-edb8218d313d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query IntrospectionQuery {\\n    __schema {\\n      queryType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      mutationType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      types {\\n        name\\n        description\\n        kind\\n      }\\n    }\\n  }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get the GraphQL schema structure and available operations"
					},
					"response": []
				}
			],
			"id": "49009646-ebe6ffae-bb8b-4df9-94e9-a523ad12c54b",
			"description": "GraphQL schema exploration and introspection"
		},
		{
			"name": "üîÆ Tarot Decks (GraphQL)",
			"item": [
				{
					"name": "Get All Tarot Decks",
					"id": "49009646-tarot-get-all",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTarotDecks($status: String!, $limit: Int, $offset: Int) {\n    tarotDecks(status: $status, limit: $limit, offset: $offset) {\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"status\": \"active\",\n    \"limit\": 10,\n    \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get paginated list of tarot decks filtered by status (active/paused). Requires read scope."
					},
					"response": []
				},
				{
					"name": "Get Tarot Deck by ID",
					"id": "49009646-tarot-get-by-id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTarotDeck($id: ID!) {\n    tarotDeck(id: $id) {\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"id\": \"68eb328199dcfa82327d86ed\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get a specific tarot deck by its ID. Requires read scope."
					},
					"response": []
				},
				{
					"name": "Create Tarot Deck",
					"id": "49009646-tarot-create",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": "OAuth2 access token (required)"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token with admin scope (required)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateTarotDeck($input: CreateTarotDeckInput!) {\n    createTarotDeck(input: $input) {\n        success\n        message\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"name\": \"Mystic Dreams Tarot 2\",\n        \"primaryImageUrl\": \"https://example.com/mystic-dreams.jpg\",\n        \"cardBackgroundUrl\": \"https://example.com/card-back.jpg\",\n        \"primaryColor\": \"#6B46C1\",\n        \"description\": \"A beautiful tarot deck inspired by mystical dreams and celestial energies. Perfect for beginners and experienced readers alike.\",\n        \"author\": \"Luna Starweaver\",\n        \"meta\": [\"mystical\", \"dreams\", \"celestial\", \"beginner-friendly\"],\n        \"layoutType\": \"classic\",\n        \"layoutCount\": 3,\n        \"status\": \"active\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new tarot deck. Requires write scope AND admin session scope. All fields are optional except status."
					},
					"response": []
				},
				{
					"name": "Update Tarot Deck",
					"id": "49009646-tarot-update",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token with admin scope (required)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateTarotDeck($id: ID!, $input: UpdateTarotDeckInput!) {\n    updateTarotDeck(id: $id, input: $input) {\n        success\n        message\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"id\": \"68eb31111a80560b29339d3d\",\n    \"input\": {\n        \"name\": \"Updated Deck Name 222\",\n        \"description\": \"Updated description with new insights and expanded guidance.\",\n        \"primaryColor\": \"#8B5CF6\",\n        \"status\": \"active\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Update an existing tarot deck. Requires write scope AND admin session scope. Only provide fields you want to update."
					},
					"response": []
				},
				{
					"name": "Delete Tarot Deck (Soft)",
					"id": "49009646-tarot-delete-soft",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteTarotDeck($id: ID!, $hardDelete: Boolean) {\n    deleteTarotDeck(id: $id, hardDelete: $hardDelete) {\n        success\n        message\n    }\n}",
								"variables": "{\n    \"id\": \"68eb328199dcfa82327d86ed\",\n    \"hardDelete\": false\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Soft delete a tarot deck (sets status to 'paused'). Requires write scope."
					},
					"response": []
				},
				{
					"name": "Delete Tarot Deck (Hard)",
					"id": "49009646-tarot-delete-hard",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteTarotDeck($id: ID!, $hardDelete: Boolean) {\n    deleteTarotDeck(id: $id, hardDelete: $hardDelete) {\n        success\n        message\n    }\n}",
								"variables": "{\n    \"id\": \"68e9a8a738af61fcb45f7a33\",\n    \"hardDelete\": true\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Permanently delete a tarot deck from the database. Requires write scope. Use with caution!"
					},
					"response": []
				}
			],
			"id": "49009646-tarot-decks-section",
			"description": "Complete CRUD operations for tarot deck management. Create/Update operations require admin session scope."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5cdf1604-28b0-42f4-9561-34c60d6fc0f4",
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1c671dcf-800f-42b9-a30e-c8b801eeea13",
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "sessionToken",
			"value": "",
			"description": "User session token for session-based authentication"
		},
		{
			"key": "refreshToken",
			"value": "",
			"description": "Refresh token for long-term sessions (keepMeLoggedIn: true)"
		},
		{
			"key": "userId",
			"value": "",
			"description": "Current user ID from login/session"
		}
	]
}