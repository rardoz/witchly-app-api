{
	"info": {
		"_postman_id": "49009646-56180f25-810e-486a-b932-a790b875dca6",
		"name": "Witchly App API",
		"description": "Comprehensive API collection for Witchly App - includes OAuth2 authentication, user login/session management with dual authentication support, GraphQL queries and mutations for user and client management with complete profile support, and advanced asset management with both simple and chunked uploads. Session operations require both OAuth2 access tokens AND user session tokens for enhanced security. Asset management supports images and videos with S3 storage, streaming uploads, progress tracking, and signed URLs for secure access.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Get OAuth2 Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f43bb924-be21-42d9-86c4-1dff5985f8f4",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', response.data.authenticate.access_token);",
									"    console.log('Access token saved to collection variable');",
									"} else {",
									"    console.log('Failed to get access token');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "49009646-78b4f094-a336-425a-8cf6-6160fccfe311",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Authenticate($grantType: String!, $clientId: String!, $clientSecret: String!, $scope: String!) { \n        authenticate(grant_type: $grantType, client_id: $clientId, client_secret: $clientSecret, scope: $scope) { \n            access_token \n            token_type \n            expires_in scope \n        } \n    }",
								"variables": "{\n    \"grantType\": \"client_credentials\",\n    \"clientId\": \"{{clientId}}\",\n    \"clientSecret\": \"{{clientSecret}}\",\n    \"scope\": \"{{scope}}\"\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get an OAuth2 access token using client credentials flow. Replace client_id and client_secret with actual values."
					},
					"response": []
				}
			],
			"id": "49009646-ba3cd696-4f9d-4610-9908-2abb38ee20a7",
			"description": "OAuth2 Client Credentials authentication endpoints"
		},
		{
			"name": "üè• Health & Status",
			"item": [
				{
					"name": "Health Check",
					"id": "49009646-5dccaf62-9323-4d4d-bd9f-fb1f5e606f04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check API health status"
					},
					"response": []
				},
				{
					"name": "Root Endpoint",
					"id": "49009646-cef0d06b-f478-444a-a213-e53ce009be1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Basic API welcome message"
					},
					"response": []
				}
			],
			"id": "49009646-92f008f8-e307-49e1-9783-d484d5d1e238",
			"description": "Basic health and status endpoints"
		},
		{
			"name": "ÔøΩ Signup (GraphQL)",
			"item": [
				{
					"name": "Initiate Signup",
					"id": "49009646-signup-initiate-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation InitiateSignup($input: InitiateSignupInput!) {\n    initiateSignup(input: $input) {\n        success\n        message\n        expiresAt\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Start the signup process by providing an email address. This will send a verification code to the email."
					},
					"response": []
				},
				{
					"name": "Complete Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e340721d-3a91-4ea1-8352-612fac7db4c1",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.completeSignup) {",
									"        pm.collectionVariables.set('sessionToken', response.data.completeSignup.sessionToken);",
									"        pm.collectionVariables.set('userId', response.data.completeSignup.userId);",
									"        if (response.data.completeSignup.refreshToken) {",
									"            pm.collectionVariables.set('refreshToken', response.data.completeSignup.refreshToken);",
									"            console.log('Long session with refresh token saved');",
									"        } else {",
									"            console.log('Short session token saved');",
									"        }",
									"    }",
									"} else {",
									"    console.log('Failed to complete signup');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-signup-complete-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CompleteSignup($input: CompleteSignupInput!) {\n    completeSignup(input: $input) {\n        success\n        message\n        sessionToken\n        refreshToken\n        expiresIn\n        expiresAt\n        userId\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\",\n        \"verificationCode\": \"852863\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Complete the signup process by providing the email and the 6-digit verification code received via email."
					},
					"response": []
				}
			],
			"id": "49009646-signup-folder-001",
			"description": "Signup flow endpoints - initiate with email and complete with verification code"
		},
		{
			"name": "üîë Login & Sessions (GraphQL)",
			"item": [
				{
					"name": "Initiate Login",
					"id": "49009646-login-initiate-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation InitiateLogin($input: InitiateLoginInput!) {    initiateLogin(input: $input) {        \n        success\n        message\n        expiresAt\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Start the login process for an existing user by providing their email address. This will send a verification code to the email."
					},
					"response": []
				},
				{
					"name": "Complete Login (Unified)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "session-token-save",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.completeLogin) {",
									"        pm.collectionVariables.set('sessionToken', response.data.completeLogin.sessionToken);",
									"        pm.collectionVariables.set('userId', response.data.completeLogin.userId);",
									"        if (response.data.completeLogin.refreshToken) {",
									"            pm.collectionVariables.set('refreshToken', response.data.completeLogin.refreshToken);",
									"            console.log('Long session with refresh token saved');",
									"        } else {",
									"            console.log('Short session token saved');",
									"        }",
									"    }",
									"} else {",
									"    console.log('Failed to complete login');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-login-complete-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CompleteLogin($input: CompleteLoginInput!) {   \n        completeLogin(input: $input) {\n            success\n            message\n            sessionToken\n            refreshToken\n            expiresIn\n            expiresAt\n            userId\n        }\n    }",
								"variables": "{\n    \"input\": {\n        \"email\": \"witchlyapp@gmail.com\",     \n        \"verificationCode\": \"266298\",       \n        \"keepMeLoggedIn\": true   \n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Complete the login process with a verification code. Set keepMeLoggedIn to true for 90-day session with refresh token, false for 4-hour session."
					},
					"response": []
				},
				{
					"name": "Refresh Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "refresh-session-token",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.refreshSession) {",
									"        pm.collectionVariables.set('sessionToken', response.data.refreshSession.sessionToken);",
									"        if (response.data.refreshSession.refreshToken) {",
									"            pm.collectionVariables.set('refreshToken', response.data.refreshSession.refreshToken);",
									"        }",
									"        console.log('Session refreshed and new tokens saved');",
									"    }",
									"} else {",
									"    console.log('Failed to refresh session');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-session-refresh-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RefreshSession($input: RefreshSessionInput!) {    \n    refreshSession(input: $input) {        \n        sessionToken        \n        refreshToken        \n        expiresIn       \n        expiresAt    \n    }\n}",
								"variables": "{   \n    \"input\": {\n        \"refreshToken\": \"{{refreshToken}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Refresh an existing long-term session using a refresh token. Only available for sessions created with keepMeLoggedIn: true."
					},
					"response": []
				},
				{
					"name": "Get My Sessions",
					"id": "49009646-sessions-list-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token (required for session operations)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query MySessions {    \n    mySessions {\n        sessionId\n        keepMeLoggedIn\n        lastUsedAt\n        expiresAt\n        userAgent\n        ipAddress\n        isActive\n        createdAt\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "List all active sessions for the authenticated user. Requires dual authentication: OAuth2 access token AND user session token."
					},
					"response": []
				},
				{
					"name": "Logout (Current Session)",
					"id": "49009646-session-logout-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token (required for session operations)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Logout {\n    logout {\n        success\n        message\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Logout from the current session. This will invalidate the current session token. Requires dual authentication: OAuth2 access token AND user session token."
					},
					"response": []
				},
				{
					"name": "Logout All Sessions",
					"id": "49009646-session-logout-all-001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token (required for session operations)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LogoutAllSessions {\n    logoutAllSessions {\n        success\n        message\n        sessionsTerminated\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Logout from all sessions for the current user. This will invalidate all session tokens for the user. Requires dual authentication: OAuth2 access token AND user session token."
					},
					"response": []
				}
			],
			"id": "49009646-login-sessions-folder-001",
			"description": "Login flow and session management endpoints - initiate login, complete with verification code, manage sessions"
		},
		{
			"name": "üë§ User Management (GraphQL)",
			"item": [
				{
					"name": "Get All Users",
					"id": "49009646-cd14a714-9c3a-4706-8c85-395de253319c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUsers($limit: Float, $offset: Float){\n    users(limit: $limit, offset: $offset) {\n        id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }\n}",
								"variables": "{\n    \"limit\": 10,\n    \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Retrieve all users (public access)"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"id": "49009646-3fb83463-7980-4098-9982-8300c2c16633",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUser($id: ID!) {\n    user(id: $id) {\n        id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }\n }",
								"variables": "{\n    \"id\": \"68e4617a870854281db2b95d\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get a specific user by ID"
					},
					"response": []
				},
				{
					"name": "Create User",
					"id": "49009646-6d120086-9187-4907-9f73-4c588e6d6d3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n     id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }  \n}",
								"variables": "{\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john.does@example.com\",\n        \"allowedScopes\": [\"read\", \"write\", \"basic\"],\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handle\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"#FF5733\",\n        \"sign\": \"aries\",\n        \"sex\": \"male\",\n        \"location\": \"location\",\n        \"birthDate\": \"1990-01-01T00:00:00.000Z\",\n        \"pronouns\": \"he/him\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Create Admin User",
					"id": "49009646-0ffaa053-fd0a-4d98-a448-efdb34d2fd8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n     id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        lastLoginAt\n        createdAt\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }  \n}",
								"variables": "{\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john.does.admin@example.com\",\n        \"allowedScopes\": [\"read\", \"write\", \"admin\"],\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handle_joe_admin\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"#FF5733\",\n        \"sign\": \"aries\",\n        \"sex\": \"male\",\n        \"location\": \"location\",\n        \"birthDate\": \"1990-01-01T00:00:00.000Z\",\n        \"pronouns\": \"he/him\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Update User",
					"id": "49009646-86f4292c-9f49-425b-acf9-e8e151f0962a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n        id\n        name\n        email\n        handle\n        allowedScopes\n        emailVerified\n        updatedAt\n        profileImageUrl\n        bio\n        shortBio\n        backdropImageUrl\n        instagramHandle\n        tikTokHandle\n        twitterHandle\n        websiteUrl\n        facebookUrl\n        snapchatHandle\n        primaryColor\n        sign\n        sex\n        location\n        birthDate\n        pronouns\n    }\n}",
								"variables": "{\n    \"id\": \"68eb2b3be279fa2be6a093b1\",\n    \"input\": {\n        \"name\": \"John Doe\",\n        \"email\": \"johnzz.doe@example.com\",\n        \"allowedScopes\": [\"read\", \"write\", \"admin\"],\n        \"profileImageUrl\": \"https://test.com\",\n        \"bio\": \"This is a bio\",\n        \"shortBio\": \"this is a short bio\",\n        \"handle\": \"handlez\",\n        \"backdropImageUrl\": \"https://handle.com\",\n        \"instagramHandle\": \"instagram\",\n        \"tikTokHandle\": \"tik\",\n        \"twitterHandle\": \"twit\",\n        \"websiteUrl\": \"https://test.com\",\n        \"facebookUrl\": \"fb\",\n        \"snapchatHandle\": \"snap\",\n        \"primaryColor\": \"red\",\n        \"sign\": \"leo\",\n        \"sex\": \"male\",\n        \"location\": \"San Francisco, CA\",\n        \"birthDate\": \"1985-10-12T00:00:00.000Z\",\n        \"pronouns\": \"they/them\"\n    }\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Update an existing user"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"id": "49009646-b1b905f8-001b-4b1e-bacb-1a7629ffcf5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteUser( $id: ID! ) {\n        deleteUser(id: $id)\n }",
								"variables": "{\n    \"id\": \"68eb2b3be279fa2be6a093b1\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Delete a user by ID"
					},
					"response": []
				}
			],
			"id": "49009646-7e081069-bb16-4b40-8ba5-c56cf66521e2",
			"description": "User management operations via GraphQL"
		},
		{
			"name": "üîë Client Management (GraphQL)",
			"item": [
				{
					"name": "Get All Clients (Admin Only)",
					"id": "49009646-29d38c5e-92bf-48ef-9ceb-b745cee05c1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetClients {    \n    clients {      \n        id      \n        clientId      \n        name      \n        description      \n        isActive      \n        allowedScopes     \n        tokenExpiresIn      \n        lastUsed      \n        createdAt      \n        updatedAt\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get all OAuth2 clients (requires admin scope)"
					},
					"response": []
				},
				{
					"name": "Get Client by ID",
					"id": "49009646-cdc147fb-cc47-4a51-95c5-163644c277e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetClient($clientId: String!) {    \n    client(clientId: $clientId) {      \n        id      \n        clientId      \n        name      \n        description      \n        isActive      \n        allowedScopes      \n        tokenExpiresIn      \n        lastUsed      \n        createdAt      \n        updatedAt    \n    }\n}",
								"variables": " {\n    \"clientId\": \"update-test-client\"\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get a specific client by clientId (clients can view their own, admins can view any)"
					},
					"response": []
				},
				{
					"name": "Create Client (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8bc4040-0862-4a7c-97bc-544f87d21013",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.createClient) {",
									"        console.log('Created Client ID:', response.data.createClient.clientId);",
									"        console.log('Created Client Secret:', response.data.createClient.clientSecret);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-e60a1064-ca7a-417c-95bf-8b8fd86587a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateClient($input: CreateClientInput!) {\n        createClient(input: $input) {\n            clientId\n            clientSecret\n    }\n}",
								"variables": "{\n    \"input\": {\n      \"name\": \"DELete me too\",\n      \"description\": \"A Mobile App OAuth2 client with basic read write permissions\",\n      \"allowedScopes\": [\"read\", \"write\", \"basic\"]\n    }\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new OAuth2 client (requires admin scope). Returns clientId and clientSecret."
					},
					"response": []
				},
				{
					"name": "Update Client (Admin Only)",
					"id": "49009646-13d49c1e-e043-48c6-b74f-8f388fafead6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateClient($clientId: String!, $input: UpdateClientInput!) {    updateClient(clientId: $clientId, input: $input) {      \n        id\n        clientId\n        name\n        description\n        isActive\n        allowedScopes\n        tokenExpiresIn\n        updatedAt\n    }\n}",
								"variables": " {\n    \"clientId\": \"client_35502a1b5f12241576c66b8440799204\",\n    \"input\": {\n      \"name\": \"DELETE THIS!\",\n      \"description\": \"NEED TO DELETE\",\n      \"isActive\": false,\n      \"allowedScopes\": [\"read\"]\n    }\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Update an existing OAuth2 client (requires admin scope)"
					},
					"response": []
				},
				{
					"name": "Delete Client (Admin Only)",
					"id": "49009646-99437999-ff6f-4d65-a30a-4b31ab46af40",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteClient($clientId: String!) {\n    deleteClient(clientId: $clientId)\n}",
								"variables": "{\n    \"clientId\": \"client_35502a1b5f12241576c66b8440799204\"\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Delete an OAuth2 client (requires admin scope)"
					},
					"response": []
				},
				{
					"name": "Regenerate Client Secret (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d48b5d0f-074c-419b-8950-d89b2004adac",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.regenerateClientSecret) {",
									"        console.log('New Client Secret:', response.data.regenerateClientSecret);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49009646-fcf0321c-83d2-4d8a-a508-99c644123ec5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RegenerateClientSecret($clientId: String!) {    regenerateClientSecret(clientId: $clientId)  \n}",
								"variables": " {\n    \"clientId\": \"update-test-client\"\n  }"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Regenerate the secret for an OAuth2 client (requires admin scope)"
					},
					"response": []
				}
			],
			"id": "49009646-872df14d-0e27-45ef-be5f-f1aaaae96e9d",
			"description": "OAuth2 client management operations via GraphQL"
		},
		{
			"name": "üîç GraphQL Introspection",
			"item": [
				{
					"name": "GraphQL Schema Introspection",
					"id": "49009646-498ee20f-264a-4edd-851d-edb8218d313d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query IntrospectionQuery {\\n    __schema {\\n      queryType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      mutationType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      types {\\n        name\\n        description\\n        kind\\n      }\\n    }\\n  }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get the GraphQL schema structure and available operations"
					},
					"response": []
				}
			],
			"id": "49009646-ebe6ffae-bb8b-4df9-94e9-a523ad12c54b",
			"description": "GraphQL schema exploration and introspection"
		},
		{
			"name": "ÔøΩ Asset Management",
			"item": [
				{
					"name": "üîç Asset Queries (GraphQL)",
					"item": [
						{
							"name": "Get All Assets",
							"id": "49009646-assets-get-all",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with read scope"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAssets($limit: Int, $offset: Int) {\n    assets(limit: $limit, offset: $offset) {\n        id\n        fileName\n        hashedFileName\n        mimeType\n        fileSize\n        s3Key\n        s3Url\n        assetType\n        uploadedBy\n        createdAt\n        updatedAt\n    }\n}",
										"variables": "{\n    \"limit\": 10,\n    \"offset\": 0\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Get paginated list of all assets. Requires OAuth2 read scope and user session."
							},
							"response": []
						},
						{
							"name": "Get Asset by ID",
							"id": "49009646-assets-get-by-id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with read scope"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAsset($id: ID!) {\n    asset(id: $id) {\n        id\n        fileName\n        hashedFileName\n        mimeType\n        fileSize\n        s3Key\n        s3Url\n        assetType\n        uploadedBy\n        createdAt\n        updatedAt\n        signedUrl\n    }\n}",
										"variables": "{\n    \"id\": \"67037f3b123456789abcdef0\"\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Get a specific asset by ID with signed URL for secure access. Requires OAuth2 read scope and user session."
							},
							"response": []
						},
						{
							"name": "Get My Assets",
							"id": "49009646-assets-get-my-assets",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with read scope"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetMyAssets($assetType: String, $limit: Int, $offset: Int) {\n    myAssets(assetType: $assetType, limit: $limit, offset: $offset) {\n        id\n        fileName\n        hashedFileName\n        mimeType\n        fileSize\n        s3Key\n        s3Url\n        assetType\n        uploadedBy\n        createdAt\n        updatedAt\n        signedUrl\n    }\n}",
										"variables": "{\n    \"assetType\": \"image\",\n    \"limit\": 20,\n    \"offset\": 0\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Get assets uploaded by the current user. Optional filtering by assetType ('image' or 'video'). Requires OAuth2 read scope and user session."
							},
							"response": []
						},
						{
							"name": "Get Upload Info",
							"id": "49009646-assets-upload-info",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with read scope"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetUploadInfo {\n    uploadInfo {\n        endpoint\n        maxSizes {\n            image\n            video\n        }\n        supportedTypes {\n            images\n            videos\n        }\n        authentication {\n            required\n        }\n        chunkedUpload {\n            endpoint\n            chunkSize\n            minChunkSize\n            maxChunkSize\n        }\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Get information about upload endpoints, supported file types, size limits, and authentication requirements."
							},
							"response": []
						}
					],
					"id": "49009646-assets-graphql-folder",
					"description": "GraphQL queries for asset retrieval and information"
				},
				{
					"name": "üì§ Simple Upload (HTTP)",
					"item": [
						{
							"name": "Upload Asset (Simple)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "asset-upload-test",
										"exec": [
											"if (pm.response.code === 201) {",
											"    const response = pm.response.json();",
											"    if (response.success && response.asset) {",
											"        pm.collectionVariables.set('lastUploadedAssetId', response.asset.id);",
											"        console.log('Asset uploaded successfully:', response.asset.fileName);",
											"        console.log('Asset ID:', response.asset.id);",
											"        console.log('Signed URL:', response.asset.signedUrl);",
											"    }",
											"} else {",
											"    console.log('Upload failed:', pm.response.text());",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49009646-assets-upload-simple",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with write scope (required)"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"description": "Select an image or video file to upload (max 50MB for images, 500MB for videos)",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/assets/upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assets",
										"upload"
									]
								},
								"description": "Upload a file using multipart/form-data. Supports images (JPEG, PNG, GIF, WebP, max 50MB) and videos (MP4, MPEG, QuickTime, AVI, WebM, max 500MB). Files are streamed directly to S3 for efficiency. Requires OAuth2 write scope and user session token."
							},
							"response": []
						},
						{
							"name": "Get Upload Info (HTTP)",
							"id": "49009646-assets-upload-info-http",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/assets/upload-info",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assets",
										"upload-info"
									]
								},
								"description": "Get detailed information about upload endpoints, supported file types, size limits, authentication requirements, and chunked upload options. No authentication required."
							},
							"response": []
						}
					],
					"id": "49009646-assets-simple-upload-folder",
					"description": "Simple file uploads using HTTP multipart/form-data (recommended for files under 50MB)"
				},
				{
					"name": "üîÑ Chunked Upload (HTTP)",
					"item": [
						{
							"name": "üß™ Complete File Upload Test",
							"item": [
								{
									"name": "Step 1: Prepare File for Chunked Upload",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "file-preparation-script",
												"exec": [
													"// This script helps prepare file metadata for chunked upload testing",
													"",
													"if (pm.response.code === 200) {",
													"    console.log('‚úÖ File preparation step completed');",
													"    console.log('');",
													"    console.log('üìã CHUNKED UPLOAD TESTING INSTRUCTIONS:');",
													"    console.log('1. Select a test file (image/video) in the next requests');",
													"    console.log('2. File will be automatically chunked based on CHUNK_SIZE');",
													"    console.log('3. Progress will be tracked automatically');",
													"    console.log('');",
													"    console.log('üìä Current Configuration:');",
													"    console.log('- Default Chunk Size: 5MB (5242880 bytes)');",
													"    console.log('- Max Image Size: 50MB');",
													"    console.log('- Max Video Size: 500MB');",
													"    console.log('');",
													"    console.log('üîß To test with different chunk size:');",
													"    console.log('1. Set collection variable: CHUNK_SIZE (in bytes)');",
													"    console.log('2. Example: 1048576 for 1MB chunks');",
													"    console.log('');",
													"    ",
													"    // Set default chunk size if not already set",
													"    if (!pm.collectionVariables.get('CHUNK_SIZE')) {",
													"        pm.collectionVariables.set('CHUNK_SIZE', 5242880); // 5MB default",
													"    }",
													"    ",
													"    // Helper function to calculate file chunks (stored for use in other requests)",
													"    pm.collectionVariables.set('chunkCalculatorScript', `",
													"        function calculateFileChunks(fileSize, chunkSize) {",
													"            const totalChunks = Math.ceil(fileSize / chunkSize);",
													"            const chunks = [];",
													"            for (let i = 0; i < totalChunks; i++) {",
													"                const start = i * chunkSize;",
													"                const end = Math.min(start + chunkSize, fileSize);",
													"                chunks.push({",
													"                    index: i,",
													"                    start: start,",
													"                    end: end,",
													"                    size: end - start",
													"                });",
													"            }",
													"            return { chunks, totalChunks };",
													"        }",
													"    `);",
													"}",
													"",
													"console.log('üöÄ Ready for chunked upload testing!');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49009646-chunked-file-prep",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/assets/upload-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assets",
												"upload-info"
											]
										},
										"description": "Preparation step for chunked upload testing. This request sets up the environment and provides instructions for testing chunked uploads with real files."
									},
									"response": []
								},
								{
									"name": "Step 2: Initialize Upload with Selected File",
									"event": [
										{
											"listen": "pre-request",
											"script": {
												"id": "dynamic-file-init-script",
												"exec": [
													"// Dynamic file initialization script",
													"// NOTE: You need to manually set these variables based on your test file:",
													"",
													"// MANUAL SETUP REQUIRED:",
													"// 1. Set collection variable 'TEST_FILE_NAME' (e.g., 'test-video.mp4')",
													"// 2. Set collection variable 'TEST_FILE_MIME_TYPE' (e.g., 'video/mp4')",
													"// 3. Set collection variable 'TEST_FILE_SIZE' (in bytes, e.g., 10485760 for 10MB)",
													"",
													"const fileName = pm.collectionVariables.get('TEST_FILE_NAME') || 'test-file.jpg';",
													"const mimeType = pm.collectionVariables.get('TEST_FILE_MIME_TYPE') || 'image/jpeg';",
													"const fileSize = parseInt(pm.collectionVariables.get('TEST_FILE_SIZE') || '5242880'); // 5MB default",
													"const chunkSize = parseInt(pm.collectionVariables.get('CHUNK_SIZE') || '5242880'); // 5MB default",
													"",
													"// Calculate total chunks",
													"const totalChunks = Math.ceil(fileSize / chunkSize);",
													"",
													"console.log('üìÅ File Upload Initialization:');",
													"console.log('- File Name:', fileName);",
													"console.log('- MIME Type:', mimeType);",
													"console.log('- File Size:', fileSize, 'bytes (' + Math.round(fileSize / 1024 / 1024 * 100) / 100 + ' MB)');",
													"console.log('- Chunk Size:', chunkSize, 'bytes (' + Math.round(chunkSize / 1024 / 1024 * 100) / 100 + ' MB)');",
													"console.log('- Total Chunks:', totalChunks);",
													"",
													"// Store for use in request body",
													"pm.collectionVariables.set('CALCULATED_TOTAL_CHUNKS', totalChunks);",
													"",
													"// Update request body dynamically",
													"const requestBody = {",
													"    fileName: fileName,",
													"    mimeType: mimeType,",
													"    totalSize: fileSize,",
													"    chunkSize: chunkSize,",
													"    totalChunks: totalChunks",
													"};",
													"",
													"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "init-upload-test",
												"exec": [
													"if (pm.response.code === 201) {",
													"    const response = pm.response.json();",
													"    if (response.success && response.uploadId) {",
													"        pm.collectionVariables.set('uploadId', response.uploadId);",
													"        pm.collectionVariables.set('chunkSize', response.chunkSize);",
													"        ",
													"        console.log('‚úÖ Chunked upload initialized successfully!');",
													"        console.log('üìã Upload Session Details:');",
													"        console.log('- Upload ID:', response.uploadId);",
													"        console.log('- Server Chunk Size:', response.chunkSize, 'bytes');",
													"        ",
													"        const totalChunks = pm.collectionVariables.get('CALCULATED_TOTAL_CHUNKS');",
													"        console.log('- Total Chunks to Upload:', totalChunks);",
													"        ",
													"        console.log('');",
													"        console.log('üîÑ NEXT STEPS:');",
													"        console.log('1. Use \"Step 3: Upload File Chunks\" to upload your file');",
													"        console.log('2. Select your actual file in the request body');",
													"        console.log('3. The request will automatically handle chunking');",
													"        console.log('4. Monitor progress with \"Step 4: Check Progress\"');",
													"    }",
													"} else {",
													"    console.log('‚ùå Failed to initialize chunked upload');",
													"    console.log('Response:', pm.response.text());",
													"    ",
													"    console.log('');",
													"    console.log('üîß TROUBLESHOOTING:');",
													"    console.log('1. Check if you have valid OAuth2 token and session token');",
													"    console.log('2. Verify file size and MIME type are valid');",
													"    console.log('3. Ensure file size does not exceed limits (50MB images, 500MB videos)');",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49009646-chunked-init-dynamic",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"description": "OAuth2 access token with write scope (required)"
											},
											{
												"key": "X-Session-Token",
												"value": "{{sessionToken}}",
												"description": "User session token (required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fileName\": \"test-file.jpg\",\n    \"mimeType\": \"image/jpeg\",\n    \"totalSize\": 5242880,\n    \"chunkSize\": 5242880,\n    \"totalChunks\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/assets/chunked/init",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assets",
												"chunked",
												"init"
											]
										},
										"description": "üîß SETUP REQUIRED: Set these collection variables before running:\n- TEST_FILE_NAME (e.g., 'my-video.mp4')\n- TEST_FILE_MIME_TYPE (e.g., 'video/mp4')\n- TEST_FILE_SIZE (file size in bytes)\n- CHUNK_SIZE (optional, defaults to 5MB)\n\nThis request will automatically calculate chunks and initialize the upload session."
									},
									"response": []
								},
								{
									"name": "Step 3: Upload File Chunks (Select Your File)",
									"event": [
										{
											"listen": "pre-request",
											"script": {
												"id": "chunk-upload-prep",
												"exec": [
													"// This script helps with chunk upload preparation",
													"",
													"const uploadId = pm.collectionVariables.get('uploadId');",
													"const chunkIndex = pm.collectionVariables.get('currentChunkIndex') || 0;",
													"",
													"if (!uploadId) {",
													"    console.log('‚ùå No upload session found. Please run Step 2 first.');",
													"    return;",
													"}",
													"",
													"console.log('üì§ Preparing chunk upload:');",
													"console.log('- Upload ID:', uploadId);",
													"console.log('- Chunk Index:', chunkIndex);",
													"",
													"console.log('');",
													"console.log('üìã INSTRUCTIONS FOR THIS REQUEST:');",
													"console.log('1. In the Body tab, select \"binary\" mode');",
													"console.log('2. Click \"Select File\" and choose your test file');",
													"console.log('3. Set X-Chunk-Hash header (use any SHA-256 hash for testing)');",
													"console.log('4. Send the request');",
													"console.log('');",
													"console.log('üí° TIP: For real implementation, you would:');",
													"console.log('- Split file into chunks client-side');",
													"console.log('- Calculate actual SHA-256 hash for each chunk');",
													"console.log('- Upload each chunk with correct index');",
													"",
													"// Update URL with current chunk index",
													"const url = pm.request.url;",
													"url.path = ['api', 'assets', 'chunked', 'upload', uploadId, chunkIndex.toString()];"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "chunk-upload-test",
												"exec": [
													"if (pm.response.code === 200) {",
													"    const response = pm.response.json();",
													"    ",
													"    if (response.success && response.progress) {",
													"        const progress = response.progress;",
													"        ",
													"        console.log('‚úÖ Chunk uploaded successfully!');",
													"        console.log('üìä Upload Progress:');",
													"        console.log('- Progress:', progress.progress + '%');",
													"        console.log('- Chunks Uploaded:', progress.chunksUploaded, '/', progress.totalChunks);",
													"        console.log('- Uploaded Size:', Math.round(progress.uploadedSize / 1024 / 1024 * 100) / 100, 'MB');",
													"        console.log('- Total Size:', Math.round(progress.totalSize / 1024 / 1024 * 100) / 100, 'MB');",
													"        console.log('- Status:', progress.status);",
													"        ",
													"        // Update chunk index for next upload",
													"        const nextChunk = (pm.collectionVariables.get('currentChunkIndex') || 0) + 1;",
													"        pm.collectionVariables.set('currentChunkIndex', nextChunk);",
													"        ",
													"        if (progress.status === 'completed') {",
													"            console.log('');",
													"            console.log('üéâ UPLOAD COMPLETED!');",
													"            console.log('File has been successfully uploaded and processed.');",
													"        } else if (nextChunk < progress.totalChunks) {",
													"            console.log('');",
													"            console.log('üîÑ NEXT CHUNK:');",
													"            console.log('- Run this request again to upload chunk', nextChunk);",
													"            console.log('- Or use \"Step 4\" to check current progress');",
													"        }",
													"    }",
													"} else {",
													"    console.log('‚ùå Chunk upload failed');",
													"    console.log('Response:', pm.response.text());",
													"    ",
													"    console.log('');",
													"    console.log('üîß COMMON ISSUES:');",
													"    console.log('1. Make sure you selected a file in Body > binary');",
													"    console.log('2. Check X-Chunk-Hash header is set');",
													"    console.log('3. Verify upload session is still valid');",
													"    console.log('4. Ensure chunk index is correct');",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49009646-chunked-upload-file",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"description": "OAuth2 access token with write scope (required)"
											},
											{
												"key": "X-Session-Token",
												"value": "{{sessionToken}}",
												"description": "User session token (required)"
											},
											{
												"key": "X-Chunk-Hash",
												"value": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
												"description": "SHA-256 hash of chunk data (use empty string hash for testing, calculate real hash in production)"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											},
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/assets/chunked/upload/{{uploadId}}/0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assets",
												"chunked",
												"upload",
												"{{uploadId}}",
												"0"
											]
										},
										"description": "üìÅ SELECT YOUR FILE: In Body tab, choose 'file' mode and select your test file. The request will automatically handle the upload and track progress. For multi-chunk files, run this request multiple times with different chunk indices."
									},
									"response": []
								},
								{
									"name": "Step 4: Check Upload Progress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "progress-check-test",
												"exec": [
													"if (pm.response.code === 200) {",
													"    const response = pm.response.json();",
													"    ",
													"    if (response.success && response.progress) {",
													"        const progress = response.progress;",
													"        ",
													"        console.log('üìä Current Upload Progress:');",
													"        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');",
													"        console.log('üìÅ File:', progress.fileName);",
													"        console.log('üéØ Progress:', progress.progress + '%');",
													"        console.log('üì¶ Chunks:', progress.chunksUploaded, '/', progress.totalChunks);",
													"        console.log('üíæ Size:', Math.round(progress.uploadedSize / 1024 / 1024 * 100) / 100, 'MB /', Math.round(progress.totalSize / 1024 / 1024 * 100) / 100, 'MB');",
													"        console.log('‚è±Ô∏è Status:', progress.status.toUpperCase());",
													"        console.log('üïê Created:', new Date(progress.createdAt).toLocaleTimeString());",
													"        console.log('üïë Updated:', new Date(progress.lastUpdated).toLocaleTimeString());",
													"        ",
													"        // Create visual progress bar",
													"        const progressBar = '‚ñà'.repeat(Math.floor(progress.progress / 5)) + '‚ñë'.repeat(20 - Math.floor(progress.progress / 5));",
													"        console.log('üìä [' + progressBar + '] ' + progress.progress + '%');",
													"        ",
													"        if (progress.status === 'completed') {",
													"            console.log('');",
													"            console.log('üéâ UPLOAD COMPLETED SUCCESSFULLY!');",
													"            console.log('Your file has been uploaded and is ready to use.');",
													"            console.log('You can now query it using the GraphQL Asset queries.');",
													"        } else if (progress.status === 'uploading') {",
													"            console.log('');",
													"            console.log('üîÑ Upload in progress...');",
													"            console.log('Continue uploading remaining chunks or wait for completion.');",
													"        } else if (progress.status === 'failed') {",
													"            console.log('');",
													"            console.log('‚ùå Upload failed. You may need to restart the upload process.');",
													"        }",
													"        ",
													"        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');",
													"    }",
													"} else {",
													"    console.log('‚ùå Failed to get progress');",
													"    console.log('Response:', pm.response.text());",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49009646-chunked-progress-check",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"description": "OAuth2 access token with read scope (required)"
											},
											{
												"key": "X-Session-Token",
												"value": "{{sessionToken}}",
												"description": "User session token (required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/assets/chunked/progress/{{uploadId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assets",
												"chunked",
												"progress",
												"{{uploadId}}"
											]
										},
										"description": "Monitor the real-time progress of your chunked upload. Shows completion percentage, chunks uploaded, file size progress, and current status with a visual progress bar."
									},
									"response": []
								},
								{
									"name": "Step 5: Cancel Upload (If Needed)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cancel-upload-test",
												"exec": [
													"if (pm.response.code === 200) {",
													"    const response = pm.response.json();",
													"    ",
													"    if (response.success) {",
													"        console.log('‚úÖ Upload cancelled successfully');",
													"        console.log('üßπ All partial data has been cleaned up');",
													"        ",
													"        // Clear upload-related variables",
													"        pm.collectionVariables.unset('uploadId');",
													"        pm.collectionVariables.unset('currentChunkIndex');",
													"        ",
													"        console.log('');",
													"        console.log('üîÑ To start a new upload:');",
													"        console.log('1. Run Step 1 again to prepare');",
													"        console.log('2. Set up your file variables');",
													"        console.log('3. Initialize a new upload session');",
													"    }",
													"} else {",
													"    console.log('‚ùå Failed to cancel upload');",
													"    console.log('Response:', pm.response.text());",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49009646-chunked-cancel-test",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"description": "OAuth2 access token with write scope (required)"
											},
											{
												"key": "X-Session-Token",
												"value": "{{sessionToken}}",
												"description": "User session token (required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/assets/chunked/{{uploadId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assets",
												"chunked",
												"{{uploadId}}"
											]
										},
										"description": "Cancel the current upload session and clean up any partial data. Use this when you want to abort an upload or start over."
									},
									"response": []
								}
							],
							"id": "49009646-complete-chunked-test",
							"description": "üß™ Complete workflow for testing chunked uploads with real files. Follow the steps in order for a guided testing experience."
						},
						{
							"name": "1. Initialize Chunked Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "chunked-upload-init-test",
										"exec": [
											"if (pm.response.code === 201) {",
											"    const response = pm.response.json();",
											"    if (response.success && response.uploadId) {",
											"        pm.collectionVariables.set('uploadId', response.uploadId);",
											"        pm.collectionVariables.set('chunkSize', response.chunkSize);",
											"        console.log('Chunked upload initialized:');",
											"        console.log('Upload ID:', response.uploadId);",
											"        console.log('Chunk Size:', response.chunkSize);",
											"    }",
											"} else {",
											"    console.log('Failed to initialize chunked upload:', pm.response.text());",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49009646-chunked-upload-init",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with write scope (required)"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileName\": \"large-video.mp4\",\n    \"mimeType\": \"video/mp4\",\n    \"totalSize\": 524288000,\n    \"chunkSize\": 5242880,\n    \"totalChunks\": 100\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/assets/chunked/init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assets",
										"chunked",
										"init"
									]
								},
								"description": "Initialize a chunked upload session for large files. Returns uploadId and recommended chunkSize. Requires OAuth2 write scope and user session token."
							},
							"response": []
						},
						{
							"name": "2. Upload Chunk",
							"id": "49009646-chunked-upload-chunk",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with write scope (required)"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									},
									{
										"key": "X-Chunk-Hash",
										"value": "sha256hashofchunkdata",
										"description": "SHA-256 hash of the chunk data for integrity verification (required)"
									},
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assets/chunked/upload/{{uploadId}}/0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assets",
										"chunked",
										"upload",
										"{{uploadId}}",
										"0"
									]
								},
								"description": "Upload a single chunk of file data. Replace '0' with the actual chunk index (0-based). Include X-Chunk-Hash header with SHA-256 hash of chunk data. Body should contain raw binary chunk data. Returns progress information after each successful chunk upload."
							},
							"response": []
						},
						{
							"name": "3. Get Upload Progress",
							"id": "49009646-chunked-upload-progress",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with read scope (required)"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/assets/chunked/progress/{{uploadId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assets",
										"chunked",
										"progress",
										"{{uploadId}}"
									]
								},
								"description": "Get real-time progress of a chunked upload session. Returns percentage complete, chunks uploaded, file size information, and upload status. Useful for progress bars and monitoring upload status."
							},
							"response": []
						},
						{
							"name": "4. Cancel Upload",
							"id": "49009646-chunked-upload-cancel",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"description": "OAuth2 access token with write scope (required)"
									},
									{
										"key": "X-Session-Token",
										"value": "{{sessionToken}}",
										"description": "User session token (required)"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/assets/chunked/{{uploadId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assets",
										"chunked",
										"{{uploadId}}"
									]
								},
								"description": "Cancel a chunked upload session and clean up any partial data. This will abort the S3 multipart upload and remove the session. Use when user cancels upload or on error recovery."
							},
							"response": []
						}
					],
					"id": "49009646-assets-chunked-upload-folder",
					"description": "Chunked upload system for large files with progress tracking and resumable uploads. Recommended for files over 50MB or when progress tracking is needed."
				}
			],
			"id": "49009646-assets-management-section",
			"description": "Complete asset management system with GraphQL queries, simple HTTP uploads, and chunked uploads with progress tracking. Supports images and videos with S3 storage and signed URLs for secure access."
		},
		{
			"name": "ÔøΩüîÆ Tarot Decks (GraphQL)",
			"item": [
				{
					"name": "Get All Tarot Decks",
					"id": "49009646-tarot-get-all",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTarotDecks($status: String!, $limit: Int, $offset: Int) {\n    tarotDecks(status: $status, limit: $limit, offset: $offset) {\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"status\": \"active\",\n    \"limit\": 10,\n    \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get paginated list of tarot decks filtered by status (active/paused). Requires read scope."
					},
					"response": []
				},
				{
					"name": "Get Tarot Deck by ID",
					"id": "49009646-tarot-get-by-id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTarotDeck($id: ID!) {\n    tarotDeck(id: $id) {\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"id\": \"68eb328199dcfa82327d86ed\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get a specific tarot deck by its ID. Requires read scope."
					},
					"response": []
				},
				{
					"name": "Create Tarot Deck",
					"id": "49009646-tarot-create",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": "OAuth2 access token (required)"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token with admin scope (required)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateTarotDeck($input: CreateTarotDeckInput!) {\n    createTarotDeck(input: $input) {\n        success\n        message\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"name\": \"Mystic Dreams Tarot 2\",\n        \"primaryImageUrl\": \"https://example.com/mystic-dreams.jpg\",\n        \"cardBackgroundUrl\": \"https://example.com/card-back.jpg\",\n        \"primaryColor\": \"#6B46C1\",\n        \"description\": \"A beautiful tarot deck inspired by mystical dreams and celestial energies. Perfect for beginners and experienced readers alike.\",\n        \"author\": \"Luna Starweaver\",\n        \"meta\": [\"mystical\", \"dreams\", \"celestial\", \"beginner-friendly\"],\n        \"layoutType\": \"classic\",\n        \"layoutCount\": 3,\n        \"status\": \"active\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Create a new tarot deck. Requires write scope AND admin session scope. All fields are optional except status."
					},
					"response": []
				},
				{
					"name": "Update Tarot Deck",
					"id": "49009646-tarot-update",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}",
								"description": "User session token with admin scope (required)"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateTarotDeck($id: ID!, $input: UpdateTarotDeckInput!) {\n    updateTarotDeck(id: $id, input: $input) {\n        success\n        message\n        id\n        name\n        primaryImageUrl\n        cardBackgroundUrl\n        primaryColor\n        description\n        author\n        meta\n        layoutType\n        layoutCount\n        status\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"id\": \"68eb31111a80560b29339d3d\",\n    \"input\": {\n        \"name\": \"Updated Deck Name 222\",\n        \"description\": \"Updated description with new insights and expanded guidance.\",\n        \"primaryColor\": \"#8B5CF6\",\n        \"status\": \"active\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Update an existing tarot deck. Requires write scope AND admin session scope. Only provide fields you want to update."
					},
					"response": []
				},
				{
					"name": "Delete Tarot Deck (Soft)",
					"id": "49009646-tarot-delete-soft",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteTarotDeck($id: ID!, $hardDelete: Boolean) {\n    deleteTarotDeck(id: $id, hardDelete: $hardDelete) {\n        success\n        message\n    }\n}",
								"variables": "{\n    \"id\": \"68eb328199dcfa82327d86ed\",\n    \"hardDelete\": false\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Soft delete a tarot deck (sets status to 'paused'). Requires write scope."
					},
					"response": []
				},
				{
					"name": "Delete Tarot Deck (Hard)",
					"id": "49009646-tarot-delete-hard",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Session-Token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteTarotDeck($id: ID!, $hardDelete: Boolean) {\n    deleteTarotDeck(id: $id, hardDelete: $hardDelete) {\n        success\n        message\n    }\n}",
								"variables": "{\n    \"id\": \"68e9a8a738af61fcb45f7a33\",\n    \"hardDelete\": true\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Permanently delete a tarot deck from the database. Requires write scope. Use with caution!"
					},
					"response": []
				}
			],
			"id": "49009646-tarot-decks-section",
			"description": "Complete CRUD operations for tarot deck management. Create/Update operations require admin session scope."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5cdf1604-28b0-42f4-9561-34c60d6fc0f4",
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1c671dcf-800f-42b9-a30e-c8b801eeea13",
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "sessionToken",
			"value": "",
			"description": "User session token for session-based authentication"
		},
		{
			"key": "refreshToken",
			"value": "",
			"description": "Refresh token for long-term sessions (keepMeLoggedIn: true)"
		},
		{
			"key": "userId",
			"value": "",
			"description": "Current user ID from login/session"
		},
		{
			"key": "uploadId",
			"value": "",
			"description": "Upload session ID for chunked uploads"
		},
		{
			"key": "chunkSize",
			"value": "",
			"description": "Recommended chunk size for chunked uploads"
		},
		{
			"key": "lastUploadedAssetId",
			"value": "",
			"description": "ID of the most recently uploaded asset"
		},
		{
			"key": "TEST_FILE_NAME",
			"value": "",
			"description": "Name of the test file for chunked upload (e.g., 'my-video.mp4')"
		},
		{
			"key": "TEST_FILE_MIME_TYPE",
			"value": "",
			"description": "MIME type of the test file (e.g., 'video/mp4', 'image/jpeg')"
		},
		{
			"key": "TEST_FILE_SIZE",
			"value": "",
			"description": "Size of the test file in bytes (e.g., 10485760 for 10MB)"
		},
		{
			"key": "CHUNK_SIZE",
			"value": "5242880",
			"description": "Chunk size for uploads in bytes (default: 5MB)"
		},
		{
			"key": "currentChunkIndex",
			"value": "0",
			"description": "Current chunk index for multi-chunk uploads"
		}
	]
}